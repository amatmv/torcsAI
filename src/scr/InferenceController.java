package scr;

import net.sourceforge.jFuzzyLogic.FIS;
import net.sourceforge.jFuzzyLogic.FunctionBlock;

import static java.lang.Math.abs;

public class InferenceController extends Controller {

    private double [] _track_info = {
            -0.1, -0.1, -0.1, -0.1, -0.1, -1.09567, -1.40052, 1.52387, 1.68787, 0.80862, 0.66667, 0.23359, -0.12312, -0.18133, -0.05733, 0.08464, 0.1611, 0.06264, 0.08872, 0.0424, -0.12949, -0.25796, -0.18162, -0.10235, 0.02306, 0.20608, 0.06863, 0.08478, 0.16008, -0.37872, -0.44412, -0.30788, -0.26626, -0.18512, -0.12355, -0.01671, 0.14912, 0.26454, 0.20078, -0.2735, -0.26894, -0.04899, 0.246, 0.54733, 0.88432, 0.52751, -0.10618, -0.43019, -0.42607, -0.1873, -0.12884, -0.07374, 0.17492, 0.33544, 0.54279, 0.56419, 0.07527, -0.52461, -0.38907, -0.22797, -0.78747, -0.82167, -0.90841, -0.95078, -0.63116, -2.97015, -5.59058, -3.54526, -3.93476, -3.98011, -3.82221, -3.84791, -3.76904, -3.75456, -3.74632, -2.07499, -0.11087, -0.1433, -0.11441, -0.11001, -0.39221, -0.275, -0.16883, -0.05713, -0.41997, -0.11835, -0.28561, 0.0303, -0.36412, -0.31916, 0.20921, 0.05564, -0.48628, -0.38062, 0.06625, -0.07751, -0.56638, 0.01332, -0.20759, -0.18977, 0.08018, -0.40763, 0.0732, -0.53742, -0.22895, 0.51073, -0.29352, -0.84919, -0.33732, 0.04227, -0.19804, -0.33158, -0.0335, -0.23167, 0.01245, -0.05672, -0.12556, 0.18174, -0.23832, -0.43575, -0.49143, -0.30975, -0.18325, -0.52124, -0.26358, -0.4722, -0.6406, -0.25048, -0.02974, -2.07276, -2.56524, -2.3225, -2.2535, -2.18349, -2.23796, -2.03505, -2.1058, -1.88795, -1.86387, -1.91417, -1.70966, -1.8255, -2.05195, -1.94147, -1.94474, -2.04915, -2.01446, -2.19515, -2.14169, -2.29459, -2.30425, -2.41994, -2.37252, -2.53591, -2.63744, -2.79812, -2.81306, -2.88248, -3.08607, -3.23944, -3.46095, -3.68399, -3.85907, -3.87488, 11.78762, 2.02131, 3.94692, 2.8748, 2.77149, 2.55124, 2.4147, 2.24006, 2.20197, 2.0658, 2.01655, 1.85366, 1.69636, 1.66183, 1.48992, 1.34318, 1.26878, 1.21904, 1.37828, 1.49481, 1.64006, 1.70323, 1.80969, 1.97919, 2.06803, 2.23987, 2.34533, 2.55329, 2.84817, -0.53569, -0.93728, -1.38976, -1.73419, -6.6315, -2.79728, -3.13356, -2.83835, -2.45732, -2.43312, -2.27259, -2.04933, -3.47796, -3.57979, -3.40393, -3.07029, -2.89469, -2.67415, -2.43988, -2.33764, -2.15928, -2.20133, -1.89444, -1.84292, 4.60733, 8.77179, 1.41483, 2.94628, 2.40654, 2.24283, 2.06638, 1.88455, 1.70558, 1.53592, 1.40257, 1.33473, 1.34353, 1.22478, 1.23256, 1.25274, 1.14035, 1.03047, 1.05725, 1.08246, 0.97632, 0.9041, 0.87694, 0.86639, 0.84282, 0.83161, 0.80049, 0.77159, 0.88525, 0.7691, 0.78334, 0.70709, 0.68641, 0.70687, 0.67383, 0.62426, 0.66488, 0.65444, 0.57015, 0.61503, 0.61881, 0.57389, 0.55101, -4.22418, -10.1224, -1.67324, -3.84319, -2.66623, 0.28839, 0.64568, 1.023, 1.19291, 1.34594, 0.82895, 0.9282, 1.11037, 0.21508, -0.51928, -0.45943, -0.51141, -0.28078, -0.07169, 0.07283, 0.21519, 0.36101, 0.42049, -0.2528, -0.6445, -1.02874, -0.99896, -0.94845, -0.18249, -0.03113, 0.05917, 0.27504, 0.65139, 0.20391, 0.39266, -0.15936, -0.22934, -0.52064, -0.37914, -0.26561, -0.07963, -0.26028, -1.62415, -5.08828, -1.28151, -1.36314, -1.27264, -1.33691, -1.3717, -1.37043, -1.39695, -1.30566, -1.45725, -1.49377, -1.41968, -1.53428, -1.51844, -1.52031, -1.58671, -1.56632, -1.54284, -1.59722, -1.54695, -1.67611, -1.666, -1.79051, -1.71162, -1.77325, -1.72393, -1.77949, -1.93691, -1.93003, -1.92016, -1.95514, -2.01623, -2.07619, -2.07594, -2.14232, -2.09675, -2.2589, -2.27494, -2.3966, -2.33665, -0.71803, 0.0867, 0.19252, 0.24955, 0.44883, 0.6672, 0.85515, 1.02853, 1.14694, -0.09478, 0.09889, 0.18183, -0.35435, -0.31723, -0.07715, 0.20333, 0.18649, 0.00942, 0.02771, 0.13806, 0.08039, -0.07336, -0.5339, -0.56786, -0.59436, -0.25709, -0.53081, 0.03443, 0.24263, 0.34749, 0.49887, 0.10542, 0.09982, 0.21739, 0.10165, 0.35612, -0.01551, 0.03273, 0.2729, 0.51148, 0.36602, -0.21982, -0.01992, -0.01688, -0.04882, 0.05269, -0.48013, -0.24914, 0.00351, -0.16548, -0.34267, -0.07295, 0.12459, 0.07028, -0.26015, -0.0801, 0.02799, -10.67988, -2.90396, -4.13797, -3.78533, -3.5682, -3.52183, -3.30494, -3.14896, -3.01024, -2.9369, -1.41212, 1.21528, 1.35111, 1.57038, 1.40277, 0.63702, -10.92953, -2.61836, -4.12796, -4.05711, -4.47257, -4.90992, -5.48418, -6.32121, -7.30002, -10.68013, -20.50512, -5.70028, 24.20473, -2.70169, -1.6793, 2.27327, 0.00602, -0.48592, -0.33662, -0.53879, -0.18099, 0.00965, 0.21354, 0.43939, -0.23606, -0.18783, -0.02747, 0.20522, 0.37894, 0.0781, 0.15974, 0.4077, -0.07336, -0.06082, -0.2605, -0.46654, -0.2587, -0.14468, -0.11463, -0.07755, 0.1842, 0.43694, 0.38405, 0.4937, 0.25292, -0.28264, -0.26723, -0.03176, 0.24761, 0.57576, 0.91779, -0.0271, -0.35954, 5.06017, 3.6592, 3.63038, 3.29823, 3.28427, 3.13183, 2.98582, 3.01078, 2.88288, 2.80544, 2.68733, 2.60527, 2.58077, 2.52467, 2.46026, 2.40345, 2.13438, 2.04826, 2.21342, 2.20356, 2.16326, 2.23062, 2.35914, 2.38901, 2.57315, 2.55982, 2.78599, 2.83277, 2.88489, 3.00937, 3.16422, 3.42466, 3.55732, 3.85521, 4.12926, 4.47539, 4.79512, 5.28435, 5.73685, 6.47719, 4.0246, -7.18266, -2.3048, -1.68195, -1.42912, -1.41195, -1.42001, -1.42401, -1.3915, -1.60009, -1.36796, -1.38593, -1.54558, -1.44977, -1.51344, -1.37496, -1.57831, -1.80839, -1.821, -1.7451, -1.8497, -1.73345, -1.8739, -1.81432, -1.84044, -1.80711, -1.75291, -2.12293, -7.43062, -7.3888, -7.31396, -7.6213, -7.12122, -7.30792, -0.93345, 2.84616, 1.75834, 7.99684, 5.07236, 4.52321, 5.30746, 5.43813, 5.43198, 1.27494, -0.09547, -0.01144, 0.01925, -0.00283, 0.02092, -0.57609, -0.4945, -0.31146, -0.06731, 0.16681, 0.34476, 0.48716, 0.66465, -0.21544, -0.86683, -0.72727, -0.50004, -0.31492, 0.50798, 0.9269, 0.33724, 0.30173, -0.68791, -0.66827, -0.49821, -0.22742, -0.00189, 0.2215
    };
    private int _iteracions_factor_curva = 0;

    public Action control(SensorModel sensorModel) {
        String fileName = "torcs_rules.fcl";

        FIS fis = FIS.load(fileName);
        if( fis == null ) {
            System.err.println("Can't load file: '" + fileName + "'");
            return null;
        }

        FunctionBlock rules = fis.getFunctionBlock("torcs_rules");

        int factorCurva = 0;
        if (_iteracions_factor_curva++ % 30 == 0) {
            int start = _iteracions_factor_curva/30;
            for (int i = start; i < start+7; i++)
                factorCurva += _track_info[i];
        }
        rules.setVariable("curva", factorCurva);

        double distanciaVorals = sensorModel.getTrackPosition();
        double distEsquerra, distDreta;
        if (distanciaVorals < 0) {
            distEsquerra = abs(distanciaVorals);
            distDreta = 0;
        } else {
            distDreta = abs(distanciaVorals);
            distEsquerra = 0;
        }

        rules.setVariable("voralDret", distDreta);
        rules.setVariable("voralEsquerra", distEsquerra);
        rules.setVariable("velocitat", sensorModel.getSpeed());
        rules.setVariable("rpm", sensorModel.getRPM());

        rules.evaluate();

        Action action = new Action ();

        action.accelerate = rules.getVariable("acceleracio").getValue();
        int girDret = (int)rules.getVariable("girDret").getValue();
        int girEsquerre = (int)rules.getVariable("girEsquerre").getValue();
        if (girDret == 0)
            action.steering = girEsquerre;
        else
            action.steering = -girDret;

        action.brake = rules.getVariable("frenar").getValue();

        int shiftDown = (int) rules.getVariable("shiftDown").getValue();
        action.gear = sensorModel.getGear() + (shiftDown == 1 ? -1 : 1);
//        action.gear = 1;

        return action;
    }


    public void reset() {
        System.out.println("Restarting the race!");
    }

    public void shutdown() {
        System.out.println("Bye bye!");
    }
}
